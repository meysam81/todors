name: clear-old-caches

# Parse an array of records such as following, remove the ones older than THRESHOLD_IN_DAYS
# {
#   "id": 551,
#   "ref": "refs/heads/main",
#   "key": "Linux-cargo-b3866cfb9c58935466275eb1b4a2c7d084fcbef54a33f8f24108ea390ead5860",
#   "version": "18d7a26f44592adf9fbdaa3aca53aff12bfc3477d3a1b120215bd00dd7d4fdfe",
#   "last_accessed_at": "2023-08-12T05:07:13.553333300Z",
#   "created_at": "2023-08-12T05:07:13.553333300Z",
#   "size_in_bytes": 324415287
# }

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  THRESHOLD_IN_DAYS: 30
  TARGET_DATE_FIELD: created_at
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: read
  actions: write

jobs:
  clear:
    runs-on: ubuntu-latest
    steps:
      - name: Get all caches for this repo
        id: old-caches
        run: |
          all_caches=$(gh api /repos/${{ github.repository }}/actions/caches | jq -r '.actions_caches')
          
          parse_script="""
          import sys
          import json
          import datetime
          from dateutil.parser import parse

          if len(sys.argv) != 2:
              print('Only one argument is expected', file=sys.stderr)
              exit(0)
          
          try:
              action_caches = json.loads(sys.argv[1])
          except:
              print(f'Failed parsing the json: {sys.argv[1]}', file=sys.stderr)
              exit(0)

          old_cach_ids = []

          threshold = datetime.datetime.utcnow() - datetime.timedelta(days=${{ env.THRESHOLD_IN_DAYS }})
          for cache in action_caches:
              cache_date = parse(cache['${{ env.TARGET_DATE_FIELD }}'], ignoretz=True)
              if cache_date < threshold:
                  old_cach_ids.append(cache['id'])

          if old_cach_ids:
              print(','.join(map(str, old_cach_ids)))
          """

          pip install -U pip python-dateutil
          ids=$(python -c "$parse_script" "$all_caches")

          echo "ids=${ids}" >> $GITHUB_OUTPUT
      - name: Delete old caches
        if: steps.old-caches.outputs.ids != ''
        run: |
          cache_ids=$(echo "${{ steps.old-caches.outputs.ids }}" | tr ',' '\n')
          for cache_id in ${cache_ids[@]}; do
              gh api -X DELETE /repos/${{ github.repository }}/actions/caches/${cache_id}
          done
