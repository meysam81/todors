name: ci

concurrency:
  cancel-in-progress: ${{ ! startsWith(github.ref, 'refs/tags/') }}
  group: ci-${{ github.event_name }}-${{ github.ref_name }}

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron: 30 1 * * *

jobs:
  build-binary:
    if: |
      (
        github.event_name == 'push' &&
        (
          github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/v')
        )
      ) || github.event_name == 'pull_request'
    permissions:
      contents: write
    runs-on: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: ubuntu-latest
            mold: true
            target: x86_64-unknown-linux-gnu
          - image: macos-latest
            target: x86_64-apple-darwin
          - image: ubuntu-latest
            mold: true
            musl: true
            target: x86_64-unknown-linux-musl
          - image: macos-latest
            target: aarch64-apple-darwin
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
      - name: Install Rust stable
        run: |
          rustup toolchain install stable --target ${{ matrix.target }}
      - if: matrix.mold
        name: Install mold
        uses: rui314/setup-mold@v1
      - if: matrix.musl
        name: Install musl
        run: |
          sudo apt update
          sudo apt install -y musl-tools
      - if: runner.os == 'Linux'
        name: Install protoc
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libprotobuf-dev
      - if: runner.os == 'macOS'
        name: Install macOS dependencies
        run: |
          brew install coreutils protobuf
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
      - name: Rename binary
        run: |
          cp target/${{ matrix.target }}/release/todors target/${{ matrix.target }}/release/todors-${{ matrix.target }}
      - name: Checksum
        run: |
          cp target/${{ matrix.target }}/release/todors-${{ matrix.target }} todors-${{ matrix.target }}
          sha256sum todors-${{ matrix.target }} > todors-${{ matrix.target }}.sha256
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: todors-${{ matrix.target }}
          path: |
            todors-${{ matrix.target }}
            todors-${{ matrix.target }}.sha256
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        name: Create GitHub release
        run: |
          gh release create ${{ github.ref_name }} \
            --title ${{ github.ref_name }} \
            --generate-notes
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          gh release upload ${{ github.ref_name }} \
            todors-${{ matrix.target }} \
            todors-${{ matrix.target }}.sha256
      - if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        name: Publish to crates.io
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  clippy:
    if: |
      (
        github.event_name == 'push' &&
        github.ref == 'refs/heads/main'
      ) ||
      (
        github.event_name == 'pull_request'
      )
    permissions:
      actions: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
      - name: Install Rust stable
        run: |
          rustup toolchain install stable
      - name: Install required cargo
        run: cargo install clippy-sarif sarif-fmt
      - continue-on-error: true
        name: Run rust-clippy
        run: cargo clippy --all-features --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true

  deploy:
    needs: build-docker-edge
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        name: Deploy
        run: flyctl deploy --remote-only

  rust-docs:
    if: |
      (
        github.event_name == 'push' &&
        github.ref == 'refs/heads/main'
      ) ||
      (
        github.event_name == 'pull_request'
      )
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
      - name: Install Rust stable
        run: |
          rustup toolchain install stable
      - name: Install mold
        uses: rui314/setup-mold@v1
      - name: Install protoc
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libprotobuf-dev
      - name: Build docs
        run: |
          cargo doc --no-deps
          cat << 'EOF' > target/doc/index.html
          <?DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="refresh" content="0; url=todors/index.html" />
            </head>
          </html>
          EOF
      - if: github.ref == 'refs/heads/main'
        name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./target/doc/

  test:
    if: |
      (
        github.event_name == 'push' &&
        github.ref == 'refs/heads/main'
      ) ||
      (
        github.event_name == 'pull_request'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
      # NOTE: this will save ~3GiB of space and takes time to download/upload
      # - if: runner.os == 'macOS'
      #   name: Cache Homebrew
      #   uses: actions/cache@v3
      #   with:
      #     path: |
      #       ~/Library/Caches/Homebrew/downloads/
      #     key: ${{ runner.os }}-homebrew
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: Install mold
        uses: rui314/setup-mold@v1
      - if: runner.os == 'Linux'
        name: Install protoc
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libprotobuf-dev
      - name: Install grcov
        run: |
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.18/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.cargo/bin"
          grcov --version
      - env:
          CARGO_INCREMENTAL: "0"
          LLVM_PROFILE_FILE: cargo-test-%p-%m.profraw
          RUSTFLAGS: "-Cinstrument-coverage"
        name: Run tests
        run: |
          cargo test --all-features --all-targets --all | tee -a $GITHUB_STEP_SUMMARY
      - name: Generate coverage reports
        run: |
          grcov . --binary-path ./target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage.lcov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
