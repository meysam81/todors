searchState.loadedDescShard("todors", 0, "Trait for implementing OpenAPI Schema object.\nGenerate reusable OpenAPI schema to be used together with …\nOptional set of alias schemas for the <code>ToSchema::schema</code>.\nReturn a tuple of name and schema or reference to a schema …\nGenerate shell completion\nCreate a new TODO with a title\nDelete a TODO by ID\nGet a TODO by ID\nServe gRPC over HTTP server\nServe REST over HTTP server\nList all TODOs\nServe either the gRPC or REST over HTTP server\nUpdate a TODO by ID\nWhether or not the provided TODOs are done\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe ID of the TODO to delete\nThe ID of the TODO to update\nThe ID of the TODO to get\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of results to return\nStart of the query\nWhether or not to print indented JSON\nWhether or not to print indented JSON\nGenerate completion scripts for your shell\nThe title of the TODO\nThe new title of the TODO\nError occurred while decoding a value from a specific …\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nError returned from the database.\nError occurred while decoding a value.\nRepresents all the ways a method can fail within SQLx.\nA record that can be built from a row returned by the …\nError communicating with the database backend.\nAn alias for <code>Pool</code>, specialized for SQLite.\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nNo rows returned by a query that expected to return at …\nError occurred while attempting to establish a TLS …\nType in query doesn’t exist. Likely due to typo or …\nA background worker has crashed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTypes and traits for the <code>query</code> family of functions and …\nMake a SQL query.\nStatically checked SQL query with <code>println!()</code> style syntax.\nMake a SQL query that is mapped to a concrete type using …\nA variant of [query!] which takes a path to an explicitly …\nSQL query that will map its results to owned Rust types.\nRaw SQL query with bind parameters. Returned by <code>query</code>.\nRaw SQL query with bind parameters, mapped to a concrete …\nRaw SQL query with bind parameters, mapped to a concrete …\nBind a value for use with this SQL query.\nBind a value for use with this SQL query.\nBind a value for use with this SQL query.\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return the generated results as a …\nExecute the query and return all the generated results, …\nExecute the query and return all the generated results, …\nExecute the query and return all the generated results, …\nExecute the query and return all the generated results, …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute multiple queries and return the generated results …\nExecute the query and returns exactly one row.\nExecute the query and returns exactly one row.\nExecute the query and returns exactly one row.\nExecute the query and returns exactly one row.\nExecute the query and returns at most one row.\nExecute the query and returns at most one row.\nExecute the query and returns at most one row.\nExecute the query and returns at most one row.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap each row in the result to another type.\nMap each row in the result to another type.\nIf <code>true</code>, the statement will get prepared once and cached …\nIf <code>true</code>, the statement will get prepared once and cached …\nIf <code>true</code>, the statement will get prepared once and cached …\nMap each row in the result to another type.\nMap each row in the result to another type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerated client implementations.\nGenerated server implementations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nString value of the enum field names used in the ProtoBuf …\nReturns the value of <code>done</code>, or the default value if <code>done</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>Status</code>, or <code>None</code> if <code>value</code> is not a …\nCreates an enum from field names used in the ProtoBuf …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>Status</code>.\nReturns the value of <code>limit</code>, or the default value if <code>limit</code> …\nReturns the value of <code>offset</code>, or the default value if <code>offset</code>…\nSets <code>status</code> to the provided enum value.\nReturns the enum value of <code>status</code>, or the default if the …\nReturns the value of <code>title</code>, or the default value if <code>title</code> …\nGenerated client implementations.\nGenerated server implementations.\nEnable decompressing responses.\nAttempt to create a new client by connecting to a given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress requests with the given encoding.\nGenerated trait containing gRPC methods that should be …\nEnable decompressing requests with the given encoding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLimits the maximum size of a decoded message.\nLimits the maximum size of an encoded message.\nCompress responses with the given encoding, if the client …\nThe top-level builder for an Actix Web application.\nAn HTTP Server.\nGeneral purpose TCP server that runs services receiving …\nReturns addresses of bound sockets.\nReturns addresses of bound sockets and the scheme for it.\nSet application (root level) data.\nSets the maximum number of pending connections.\nResolves socket address(es) and binds server to created …\nResolves socket address(es) and binds server to created …\nOpens Unix Domain Socket (UDS) from <code>uds</code> path and binds …\nCreate server build.\nSets server connection shutdown timeout.\nSets server client timeout for first request.\nRun external configuration as part of the application …\nAdd application (root) data after wrapping in <code>Data&lt;T&gt;</code>.\nAdd application data factory that resolves asynchronously.\nDefault service that is invoked when no matching resource …\nDisables signal handling.\nRegister an external resource.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a <code>Server</code> handle that can be used issue commands and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets server keep-alive preference.\nBinds to existing listener for accepting incoming …\nBinds to existing listener for accepting incoming …\nBinds to existing Unix Domain Socket (UDS) listener.\nSets the per-worker maximum concurrent TLS connection …\nSets the per-worker maximum number of concurrent …\nCreate application builder. Application can be configured …\nCreate new HTTP server with application factory\nSets function that will be called once before each …\nConfigure route for a specific path.\nStart listening for incoming connections.\nSets server host name.\nRegister HTTP service.\nSets timeout for graceful worker shutdown of workers.\nFlags the <code>System</code> to exit after server shutdown.\nSets max number of threads for each worker’s blocking …\nSets number of workers to start (per bind address).\nRegisters an app-wide middleware.\nRegisters an app-wide function middleware.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGeneral purpose Actix Web error.\nErrors produced by the service.\nErrors produced by the service when polling readiness or …\nThe future response value.\nThe future response value.\nErrors produced while building a transform service.\n<code>BoxFuture</code>, but without the <code>Send</code> requirement.\nA future that is immediately ready with a value.\nResponses produced by the service.\nResponses given by the service.\nAn asynchronous operation from <code>Request</code> to a <code>Response</code>.\nA service level request wrapper.\nA service level response wrapper.\nDefines the interface of a service factory that wraps …\nThe <code>TransformService</code> value created by this factory\nAdd data container to request’s resolution set.\nCounterpart to <code>HttpRequest::app_config</code>.\nCounterpart to <code>HttpRequest::app_data</code>.\nSimilar to <code>as_response_error</code> but downcasts.\nReturns the reference to the underlying <code>ResponseError</code>.\nProcess the request and return the response asynchronously.\nCounterpart to <code>HttpRequest::conn_data</code>.\nReturns a reference to connection info.\nReturn request cookie.\nReturn request cookies.\nShortcut for creating an <code>HttpResponse</code>.\nCreate <code>ServiceResponse</code> from this request and given error.\nCreate service response for error\nDerives a type from this request using an extractor.\nAn implementation of <code>poll_ready</code> that forwards readiness …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate service response from the error\nConstruct request from parts.\nConstruct <code>ServiceRequest</code> with no payload from given …\nCreates a context object for use with a routing guard.\nReturns a reference to the request head.\nReturns a mutable reference to the request head.\nReturns a reference to request headers.\nReturns response’s headers.\nReturns a mutable reference to request headers.\nReturns mutable response’s headers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the response and returns its body.\nConsumes the <code>Ready</code>, returning the wrapped value.\nDeconstruct <code>ServiceRequest</code> into inner parts.\nDestructures <code>ServiceResponse</code> into request and response …\nCreate <code>ServiceResponse</code> from this request and given …\nCreate service response\nMap the current body type to another using a closure. …\nCounterpart to <code>HttpRequest::match_info</code>.\nReturns a mutable reference to the path match information.\nCounterpart to <code>HttpRequest::match_name</code>.\nCounterpart to <code>HttpRequest::match_pattern</code>.\nReturns the request method.\nCreate service response instance\nCreates and returns a new Transform component, …\nReturns immutable accessors to inner parts.\nReturns mutable accessors to inner parts.\nReturns request path.\nReturns peer’s socket address.\nReturns <code>Ready</code> when the service is able to process requests.\nCounterpart to <code>HttpRequest::query_string</code>.\nCreates a future that is immediately ready with a value.\nReturns immutable accessor to inner <code>HttpRequest</code>.\nReturns reference to original request.\nReturns a reference to the application’s resource map. …\nReturns reference to response.\nReturns mutable reference to response.\nSet request payload.\nReturns response status code.\nReturns the request URI.\nReturns the request version.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLogging handle used to execute logging statements\nLog debug level record\nLog error level record\nReturns the argument unchanged.\nLog info level record\nCalls <code>U::from(self)</code>.\nConvert to default, “erased” type: …\nGet list of key-value pairs assigned to this <code>Logger</code>\nLog one logging <code>Record</code>\nBuild a child logger\nBuild a root <code>Logger</code>\nBuild a root <code>Logger</code> that retains <code>drain</code> type\nCreate a copy with “erased” type\nLog trace level record\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <strong>data structure</strong> that can be deserialized from any data …\nThis type represents all possible errors that can occur …\nA <strong>data structure</strong> that can be serialized into any data …\nCategorizes the cause of this error.\nOne-based column number at which the error was detected.\nDeserialize this value from the given Serde deserializer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe kind reported by the underlying standard library I/O …\nReturns true if this error was caused by input data that …\nReturns true if this error was caused by prematurely …\nReturns true if this error was caused by a failure to read …\nReturns true if this error was caused by input that was not\nOne-based line number at which the error was detected.\nSerialize this value into the given Serde serializer.\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")